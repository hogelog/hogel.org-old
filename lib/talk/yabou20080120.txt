踊る阿呆
やらないか？
----
〜ウホッ いいLT〜
----
いいLTか？
----
それはさておき
----
LTって
----
楽しい
----
でも
知ってますか？
----
聞くより
----
やる方が
楽しい！
----
「話すことない……」
って人！
----
なんかあるよ！
たぶん！
----
「でもないよ
やっぱり……」
って人！
----
じゃあ作ろう！
----
今日この場に
来てる人は
----
ひとりで
あきはばら
これるもん！
----
「冥土」なる
人外の魍魎が跋扈する
魔都阿鬼破刃羅に
単独潜入するだけの
能力がある人ならば
----
「なにか」
できない
はずがない
----
こんな言葉があります
----
「恥をかけ。
恥を忘れるな。
さすれば
道は開けよう」
----
いや、今
考えたんですけど
----
そんな
自己暗示を
しつつ
----
id:hogelog
@hogelog
小室 直
----
の
----
プレゼン
----
はじまります
----
さて
----
「プレゼンしよう！」
----
そう思ったとき
----
まず何をしますか？
----
もちろん
----
プレゼンソフト
作成ですよね！
----
なので
こんなソフト
つくりました
----
でも
----
「ポータビリティが云々」
とかあるらしいんですよ
----
ポータビリティ
って食えんのか？
----
そんなの
知らねーｗｗｗ
----
と思ったんですけど
----
「ポータビリティすると
女の子にモテるらしい」
との未確認情報があったので
----
ポータビリティ
することに
しました
----
で、ポータビリティ
なんですけど
----
「結局パワポだ」
とか
----
「今時Firefox無い環境とかどうよ」
とか
----
「lessプレゼン最強」
とか
----
言うけどね
----
見せたいのは
結局映像じゃない？
----
じゃあ素直に
画像ファイル見せれば
いいじゃん。
----
で作ったのが
----
高橋メソッド
画像メーカー
----
ページ区切りを
「----」
としたテキストを
画像に変換
----
単純に、1ページ1画像です
----
こんな感じに使います
----
デフォルト動作は
そのときの画面サイズを
とってきて、そのサイズにします
----
作成する画像サイズを
指定することもできます
----
わかる人には
わかったと思いますが
----
表示に使ったのは
IrfanViewです
----
でも別に
IrfanView
じゃなくても
----
WindowsXP、Vista
標準の画像ビューア
とかでもいけます
----
もちろん
自分で書いても
いいですし
----
出力形式が画像
ってのは
----
そうとうな
ポータビリティ
ですね
----
これでモテモテ！
----
「ポータビリティすると
モテモテってのは誤情報」
との最新情報が入ってきました
----
／(＾o＾)＼ﾅﾝﾃｺｯﾀｲ
----
人生オワタ＼(^o^)／
----
／^o^＼フッジッサーン
----
すいません
とりみだしました
----
はなしを戻して
プレゼンツール
----
[もんたメソッド]
にも対応してみました
----
もんたメソッド？
----
[このように]
[かくして]
[めくって]
[進める方法]
----
ご覧の通り
[隠し]が微妙に
甘いですけど
----
御愛嬌
----
言わゆる
[チラリズム]
----
というわけで
ポータビリティ
というのなら
----
出力形式は
単なる画像に
してみるってのも
----
一考の価値あり
違うかなと思います。
----
<h1>hogelogの野望</h1>
----
このプレゼン手法
----
入力は
簡単なテキスト
----
なので
----
かなり楽に
プレゼン資料
つくれます
----
でも
----
もっと
----
もっと
もっと
----
もっと
もっと
もっと
----
for(;;)
  puts("もっと")
----
(letrec ((f (lambda () (print "もっと") (f)))) (f))
----
楽をしたい
----
逆に考えるんだ
----
「準備を楽に」
じゃなく
----
「準備しなくてもいいや」
と
----
いや無理だろそれ
----
たぶん無理？
----
無理とか無理じゃない
とかはいい
----
「やる」か
「やらない」か
なんだ
----
結果どこに
着陸するかは
知りません
----
ただ、きっと
今と違う場所に
いるはず
----
そんなマンガチックな言葉は
どうでもいいんですけど
----
とりあえず考える前に
やってみるというのは好きなので
今年はそんなプレゼンツールに
挑戦しようかなと思います
----
という夢を見ました
----
まさかの夢オチ！
----
というわけで
----
ごせいちょう
ありがとうございました
----
みなさまの
2008年に
幸多からんことを
----
時間あまってる？
時間あまってる？
----
じゃあちょっとこの
プログラムの概要でも
----
Javaで書きました
慣れてるもんで
----
package com.xrea.konbu.takimg;

import javax.imageio.ImageIO;
import java.awt.GraphicsEnvironment;
import java.awt.GraphicsConfiguration;
import java.awt.GraphicsDevice;
import java.awt.DisplayMode;
import java.awt.Graphics2D;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.BufferedReader;
import java.awt.Dimension;
import java.awt.Color;
import java.awt.Font;
import java.awt.Shape;
import java.awt.Rectangle;
import java.awt.font.TextLayout;
import java.awt.font.FontRenderContext;
import java.awt.geom.Rectangle2D;
import java.util.Vector;
import java.util.regex.Pattern;
import java.util.regex.Matcher;

public class TakImg {
  private final Vector<String> takpages;
  private Dimension screensize = null;
  private static final GraphicsEnvironment genv =
    GraphicsEnvironment.getLocalGraphicsEnvironment();
  private static final GraphicsDevice gdevice =
    genv.getDefaultScreenDevice();
  private static final DisplayMode dmode =
    gdevice.getDisplayMode();
  private static final GraphicsConfiguration gconf =
    gdevice.getDefaultConfiguration();
  private static final FontRenderContext noaaFrc =
    new FontRenderContext(null, false, false);
  private static final FontRenderContext aaFrc =
    new FontRenderContext(null, true, false);

  private float width = (float)0.0;
  private float height = (float)0.0;

  public TakImg(Vector<String> pages)
  {
    this(pages, dmode.getWidth(), dmode.getHeight());
  }
  public TakImg(Vector<String> pages, int width, int height)
  {
    takpages = pages;
    screensize = new Dimension(width, height);
    System.out.println("Image size = "+width+"x"+height);
  }
  public BufferedImage createImage(int width, int height)
  {
    return gconf.createCompatibleImage(screensize.width, screensize.height);
  }
  public Font getFitFont(Graphics2D g2, String page)
  {
    Font fitFont = Font.decode("default");
    float fontsize = (float)1.0;
    Rectangle2D areasize = null;
    if(page.intern()=="") return fitFont;
    String\[] lines = page.split("\n", 1000);
    int lineCount = lines.length - 1;
    String limitWidthLine = null;
    Rectangle2D maxRect = null;
    for(String line : lines){
      if(line.intern()=="") break;
      TextLayout text = new TextLayout(line, fitFont, noaaFrc);
      Rectangle2D lineRect = text.getBounds();
      if(maxRect == null || lineRect.getWidth()>maxRect.getWidth()){
        limitWidthLine = line;
        maxRect = lineRect;
      }
    }

    //float width, height;
    do{
      fontsize += 10.0;
      fitFont = fitFont.deriveFont(fontsize);
      TextLayout text = new TextLayout(limitWidthLine, fitFont, noaaFrc);
      width = text.getAdvance();
      height = text.getAscent() + text.getDescent();
    } while(width < screensize.width && height*lineCount < screensize.height);
    while(width > screensize.width || height*lineCount > screensize.height){
      fontsize -= 1.0;
      fitFont = fitFont.deriveFont(fontsize);
      TextLayout text = new TextLayout(limitWidthLine, fitFont, noaaFrc);
      width = text.getAdvance();
      height = text.getAscent() + text.getDescent();
    }
    return fitFont;
  }
  public void paintPage(Graphics2D g2, String page)
  {
    Font fitFont;
    Matcher montaMat = montaPat.matcher(page);
    if(montaMat.find()){
      String fpage = page;
      do {
        fpage = montaMat.replaceFirst(montaMat.group(1)+montaMat.group(2));
        montaMat = montaPat.matcher(fpage);
      } while(montaMat.find());
      fpage = fpage.replaceAll("\\\\(.)", "$1");
      fitFont = getFitFont(g2, fpage);
    }
    else{
      fitFont = getFitFont(g2, page);
    }
    String\[] lines = page.split("\n", 1000);
    float y = (float)((screensize.height-(height*lines.length))/2.0);
    y = y<0 ? (float)0.0 : y;
    g2.setColor(Color.white);
    g2.fillRect(0, 0, screensize.width, screensize.height);
    g2.setColor(Color.black);
    for(String line : lines){
      if(line.intern()=="") break;
      TextLayout text = new TextLayout(line.replaceAll("\\\\(.)", "$1"), fitFont, aaFrc);
      montaMat = montaPat.matcher(line);
      while(montaMat.find()){
        String match = montaMat.group(1)+montaMat.group(2);
        boolean top = montaMat.group(1).intern()=="" ? true : false;
        line = montaMat.replaceFirst(match);
        Shape box = text.getBlackBoxBounds(montaMat.start()+(top?0:1), montaMat.end()-1);
        Rectangle rec = box.getBounds();
        rec.setLocation(rec.x, (int)(text.getDescent()+y));
        g2.draw(rec);
        g2.fill(rec);
        montaMat = montaPat.matcher(line);
        text = new TextLayout(line.replaceAll("\\\\(.)", "$1"), fitFont, aaFrc);
      }
      y += text.getAscent();
      text.draw(g2, (float)0.0, y);
      y += text.getDescent();
    }
  }
  public void savePages(String savepath) throws IOException
  {
    int i = 0;
    for(String page : takpages){
      BufferedImage pageimg = createImage(screensize.width, screensize.height);
      Graphics2D g2 = pageimg.createGraphics();
      paintPage(g2, page);
      String pagepath = String.format(savepath+"/data%05d.png", i++);
      System.out.println(pagepath);
      //System.out.println(page);
      File pagefile = new File(pagepath);
      ImageIO.write(pageimg, "png", pagefile);
    }
  }
  private static boolean isDirectory(String path)
  {
    File file = new File(path);
    if(!file.exists()){
      if(file.mkdir()){
        return true;
      }
    }
    else if(file.isDirectory()){
      return true;
    }
    return false;
  }
  public static final Pattern montaPat = Pattern.compile("(^|\[^\\\\])\\\[(\[^\\]]+)]");
  //private static final Pattern quotPat = Pattern.compile("\\\\(.)", Pattern.MULTILINE);
  //private static final Pattern quotPat = Pattern.compile("\\\\");
  public static Vector<String> readPages(String takpath)
  {
    String page = "";
    String line = null;
    Vector<String> pages = new Vector<String>();
    try{
      BufferedReader takfile =
        new BufferedReader(new FileReader(takpath));
      while((line = takfile.readLine())!=null){
        if(line.intern()=="----"){
          pages.addElement(page);
          Matcher montaMat = montaPat.matcher(page);
          while(montaMat.find()){
            String match = montaMat.group(1)+montaMat.group(2);
            page = montaMat.replaceFirst(match);
            pages.addElement(page);
            montaMat = montaPat.matcher(page);
          }
          page = "";
        }
        else{
          page += (line + "\r\n");
        }
      }
    }
    catch(FileNotFoundException fex){
      System.err.println(takpath+"は存在しません");
    }
    catch(IOException ex){
      System.err.println(takpath+"の読み込みに失敗しました");
    }

    if(page.intern() != ""){
      pages.addElement(page);
    }
    return pages;
  }

  public static void main(String\[] args)
  {
    //TakImg takImg = new TakImg();
    String takpath = null;
    String savepath = null;
    int width = 0, height = 0;
    if(args.length == 0){
      System.out.println("TakImg takahashi-text \[output-dir \[image-size]]");
      return;
    }

    takpath = args\[0];

    if(args.length == 1){
      savepath = "data";
    }
    else if(args.length == 2){
      savepath = args\[1];
    }
    else if(args.length == 3){
      savepath = args\[1];
      String\[] size = args\[2].split("x", 1000);
      width = Integer.valueOf(size\[0]);
      height = Integer.valueOf(size\[1]);
    }

    if(savepath == null || !isDirectory(savepath)){
      return;
    }

    Vector<String> pages = readPages(takpath);

    TakImg takImg;
    if(width!=0 && height!=0){
      takImg = new TakImg(pages, width, height);
    }
    else{
      takImg = new TakImg(pages);
    }

    try{
      takImg.savePages(savepath);
    }
    catch(IOException ex){
      System.err.println("画像書き込み失敗");
    }
  }
}
----
あー後ろの方には
文字が小さすぎて
見えなかったかも
しれませんね
----
ソースコードはたったの255行
C:\hoge\docs\takimg>wc -l TakImg.java
255 TakImg.java
----
キリがよくて
嬉しいですね
----
やってることは
テキストファイルから
java.awt.font.TextLayout
オブジェクトを作って
----
それが画面ぴったりに
なるようなフォントサイズを
調べて、画像として書き込むだけ
----
そんなんでも
こういうプレゼンするには
けっこう便利かも
----
ソースはマジでひどいけど
----
getFitFontなる
画面ぴったりサイズの
フォントを返すメソッドに
何故か副作用があるとか
----
ひどい！
